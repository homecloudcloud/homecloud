import { Binary, BindingPipe, Conditional, Interpolation, LiteralMap, LiteralPrimitive, MethodCall, ParseTemplateOptions, TmplAstBoundAttribute, TmplAstBoundText, TmplAstElement, TmplAstTemplate, TmplAstTextAttribute } from '@angular/compiler';
import { TemplateExtractorConfig } from './types';
export declare function isTemplate(node: unknown): node is TmplAstTemplate;
export declare function isElement(node: unknown): node is TmplAstElement;
export declare function isBoundText(node: unknown): node is TmplAstBoundText;
export declare function isBoundAttribute(node: unknown): node is TmplAstBoundAttribute;
export declare function isTextAttribute(node: unknown): node is TmplAstTextAttribute;
export declare function isBindingPipe(ast: unknown): ast is BindingPipe;
export declare function isInterpolation(ast: unknown): ast is Interpolation;
export declare function isMethodCall(ast: unknown): ast is MethodCall;
export declare function isNgTemplateTag(node: TmplAstTemplate): boolean;
export declare function isLiteralExpression(expression: unknown): expression is LiteralPrimitive;
export declare function isLiteralMap(expression: unknown): expression is LiteralMap;
export declare function isConditionalExpression(expression: unknown): expression is Conditional;
export declare function isBinaryExpression(expression: unknown): expression is Binary;
export declare function parseTemplate(config: TemplateExtractorConfig, options?: ParseTemplateOptions): import("@angular/compiler").ParsedTemplate;
type GuardedType<T> = T extends (x: any) => x is infer U ? U : never;
export declare function isSupportedNode<Predicates extends any[]>(node: unknown, predicates: Predicates): node is GuardedType<Predicates[number]>;
export {};
