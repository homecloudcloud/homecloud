"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.isSupportedNode = exports.parseTemplate = exports.isBinaryExpression = exports.isConditionalExpression = exports.isLiteralMap = exports.isLiteralExpression = exports.isNgTemplateTag = exports.isMethodCall = exports.isInterpolation = exports.isBindingPipe = exports.isTextAttribute = exports.isBoundAttribute = exports.isBoundText = exports.isElement = exports.isTemplate = void 0;
const compiler_1 = require("@angular/compiler");
const file_utils_1 = require("../../utils/file.utils");
function isTemplate(node) {
    return node instanceof compiler_1.TmplAstTemplate;
}
exports.isTemplate = isTemplate;
function isElement(node) {
    return node instanceof compiler_1.TmplAstElement;
}
exports.isElement = isElement;
function isBoundText(node) {
    return node instanceof compiler_1.TmplAstBoundText;
}
exports.isBoundText = isBoundText;
function isBoundAttribute(node) {
    return node instanceof compiler_1.TmplAstBoundAttribute;
}
exports.isBoundAttribute = isBoundAttribute;
function isTextAttribute(node) {
    return node instanceof compiler_1.TmplAstTextAttribute;
}
exports.isTextAttribute = isTextAttribute;
function isBindingPipe(ast) {
    return ast instanceof compiler_1.BindingPipe;
}
exports.isBindingPipe = isBindingPipe;
function isInterpolation(ast) {
    return ast instanceof compiler_1.Interpolation;
}
exports.isInterpolation = isInterpolation;
function isMethodCall(ast) {
    return ast instanceof compiler_1.MethodCall;
}
exports.isMethodCall = isMethodCall;
function isNgTemplateTag(node) {
    return node.tagName === 'ng-template';
}
exports.isNgTemplateTag = isNgTemplateTag;
function isLiteralExpression(expression) {
    return expression instanceof compiler_1.LiteralPrimitive;
}
exports.isLiteralExpression = isLiteralExpression;
function isLiteralMap(expression) {
    return expression instanceof compiler_1.LiteralMap;
}
exports.isLiteralMap = isLiteralMap;
function isConditionalExpression(expression) {
    return expression instanceof compiler_1.Conditional;
}
exports.isConditionalExpression = isConditionalExpression;
function isBinaryExpression(expression) {
    return expression instanceof compiler_1.Binary;
}
exports.isBinaryExpression = isBinaryExpression;
function parseTemplate(config, options) {
    const { file, content } = config;
    const resolvedContent = content || (0, file_utils_1.readFile)(file);
    return (0, compiler_1.parseTemplate)(resolvedContent, file, options);
}
exports.parseTemplate = parseTemplate;
function isSupportedNode(node, predicates) {
    return predicates.some((predicate) => predicate(node));
}
exports.isSupportedNode = isSupportedNode;
//# sourceMappingURL=utils.js.map