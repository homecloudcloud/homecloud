"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildKeysFromASTNodes = void 0;
const typescript_1 = require("typescript");
function buildKeysFromASTNodes(nodes, allowedMethods = ['translate', 'selectTranslate']) {
    const result = [];
    for (let node of nodes) {
        if ((0, typescript_1.isCallExpression)(node.parent)) {
            const method = node.parent.expression;
            let methodName = '';
            if ((0, typescript_1.isIdentifier)(method)) {
                methodName = method.text;
            }
            else if ((0, typescript_1.isPropertyAccessExpression)(method)) {
                methodName = method.name.text;
            }
            if (allowedMethods.includes(methodName) === false) {
                continue;
            }
            const [keyNode, _, langNode] = node.parent.arguments;
            let lang;
            let keys = [];
            if (isStringNode(langNode)) {
                lang = langNode.text;
            }
            if (isStringNode(keyNode)) {
                keys = [keyNode.text];
            }
            else if ((0, typescript_1.isArrayLiteralExpression)(keyNode)) {
                keys = keyNode.elements.filter(isStringNode).map((node) => node.text);
            }
            for (const key of keys) {
                const data = lang ? { lang, key } : { key };
                result.push(data);
            }
        }
    }
    return result;
}
exports.buildKeysFromASTNodes = buildKeysFromASTNodes;
function isStringNode(node) {
    return (node && ((0, typescript_1.isStringLiteral)(node) || (0, typescript_1.isNoSubstitutionTemplateLiteral)(node)));
}
//# sourceMappingURL=build-keys-from-ast-nodes.js.map