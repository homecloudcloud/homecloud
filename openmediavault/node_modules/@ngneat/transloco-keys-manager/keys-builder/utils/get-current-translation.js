"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCurrentTranslation = void 0;
const flat_1 = require("flat");
const fsExtra = __importStar(require("fs-extra"));
const gettext_parser_1 = require("gettext-parser");
const config_1 = require("../../config");
function parseJson(path) {
    return fsExtra.readJsonSync(path, { throws: false }) || {};
}
function parsePot(path) {
    try {
        const file = fsExtra.readFileSync(path, 'utf8');
        const parsed = gettext_parser_1.po.parse(file, 'utf8');
        if (!Object.keys(parsed.translations).length) {
            return {};
        }
        const value = Object.keys(parsed.translations[''])
            .filter((key) => key.length > 0)
            .reduce((acc, key) => (Object.assign(Object.assign({}, acc), { [key]: parsed.translations[''][key].msgstr.pop() })), {});
        return (0, config_1.getConfig)().unflat
            ? (0, flat_1.unflatten)(value, {
                object: true,
            })
            : value;
    }
    catch (e) {
        if (e.code === 'ENOENT') {
            return {};
        }
        console.warn('Something is wrong with the provided file at "%s":', path, e.message);
    }
}
const parsers = {
    json: parseJson,
    pot: parsePot,
};
function getCurrentTranslation({ path, fileFormat, }) {
    return parsers[fileFormat](path);
}
exports.getCurrentTranslation = getCurrentTranslation;
//# sourceMappingURL=get-current-translation.js.map