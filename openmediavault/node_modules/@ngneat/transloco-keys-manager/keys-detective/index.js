"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.findMissingKeys = void 0;
const config_1 = require("../config");
const build_keys_1 = require("../keys-builder/build-keys");
const messages_1 = require("../messages");
const logger_1 = require("../utils/logger");
const resolve_config_1 = require("../utils/resolve-config");
const compare_keys_to_files_1 = require("./compare-keys-to-files");
const get_translation_files_path_1 = require("./get-translation-files-path");
function findMissingKeys(inlineConfig) {
    const logger = (0, logger_1.getLogger)();
    const config = (0, resolve_config_1.resolveConfig)(inlineConfig);
    (0, config_1.setConfig)(config);
    const { translationsPath, fileFormat } = config;
    const translationFiles = (0, get_translation_files_path_1.getTranslationFilesPath)(translationsPath, fileFormat);
    if (translationFiles.length === 0) {
        console.log('No translation files found.');
        return;
    }
    logger.log('\n 🕵 🔎', `\x1b[4m${messages_1.messages.startSearch}\x1b[0m`, '🔍 🕵\n');
    logger.startSpinner(`${messages_1.messages.extract} `);
    const result = (0, build_keys_1.buildKeys)(config);
    logger.success(`${messages_1.messages.extract} 🗝`);
    const { addMissingKeys, emitErrorOnExtraKeys } = config;
    (0, compare_keys_to_files_1.compareKeysToFiles)({
        scopeToKeys: result.scopeToKeys,
        translationsPath,
        addMissingKeys,
        emitErrorOnExtraKeys,
        fileFormat,
    });
}
exports.findMissingKeys = findMissingKeys;
//# sourceMappingURL=index.js.map