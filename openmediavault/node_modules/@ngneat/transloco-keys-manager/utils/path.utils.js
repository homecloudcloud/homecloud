"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.buildScopeFilePaths = exports.resolveConfigPaths = exports.getScopeAndLangFromPath = exports.buildPath = exports.pathUnixFormat = void 0;
const path_1 = __importStar(require("path"));
const config_1 = require("../config");
const validators_utils_1 = require("./validators.utils");
function pathUnixFormat(path) {
    return path.split(path_1.sep).join('/');
}
exports.pathUnixFormat = pathUnixFormat;
function buildPath(obj) {
    return Object.keys(obj).reduce((acc, curr) => {
        const keys = (0, validators_utils_1.isObject)(obj[curr])
            ? buildPath(obj[curr]).map((inner) => `${curr}.${inner}`)
            : [curr];
        acc.push(...keys);
        return acc;
    }, []);
}
exports.buildPath = buildPath;
/**
 * /Users/username/www/folderName/src/assets/i18n/admin/es.json => { scope: admin, lang: es }
 * /Users/username/www/folderName/src/assets/i18n/es.json => { scope: undefined, lang: es }
 */
function getScopeAndLangFromPath({ filePath, translationsPath, fileFormat, }) {
    filePath = pathUnixFormat(filePath);
    translationsPath = pathUnixFormat(translationsPath);
    if (translationsPath.endsWith('/') === false) {
        translationsPath = `${translationsPath}/`;
    }
    const [_, pathWithScope] = filePath.split(translationsPath);
    const scopePath = pathWithScope.split('/');
    const removeExtension = (str) => str.replace(`.${fileFormat}`, '');
    let scope, lang;
    if (scopePath.length > 1) {
        lang = removeExtension(scopePath.pop());
        scope = scopePath.join('/');
    }
    else {
        lang = removeExtension(scopePath[0]);
    }
    return { scope, lang };
}
exports.getScopeAndLangFromPath = getScopeAndLangFromPath;
function resolveConfigPaths(config, sourceRoot) {
    const resolvePath = (configPath) => path_1.default.resolve(process.cwd(), sourceRoot, configPath);
    config.input = config.input.map(resolvePath);
    ['output', 'translationsPath'].forEach((prop) => {
        config[prop] = resolvePath(config[prop]);
    });
}
exports.resolveConfigPaths = resolveConfigPaths;
function buildScopeFilePaths({ aliasToScope, output, langs, fileFormat, }) {
    const { scopePathMap = {} } = (0, config_1.getConfig)();
    return Object.values(aliasToScope).reduce((files, scope) => {
        langs.forEach((lang) => {
            let bastPath = scopePathMap[scope]
                ? scopePathMap[scope]
                : `${output}/${scope}`;
            files.push({
                path: `${bastPath}/${lang}.${fileFormat}`,
                scope,
            });
        });
        return files;
    }, []);
}
exports.buildScopeFilePaths = buildScopeFilePaths;
//# sourceMappingURL=path.utils.js.map