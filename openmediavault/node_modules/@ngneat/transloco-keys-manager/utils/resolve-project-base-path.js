"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.resolveProjectBasePath = void 0;
const chalk_1 = __importDefault(require("chalk"));
const cosmiconfig_1 = require("cosmiconfig");
const path_1 = __importDefault(require("path"));
const collection_utils_1 = require("./collection.utils");
const json_utils_1 = require("./json.utils");
const validators_utils_1 = require("./validators.utils");
const normalize_glob_path_1 = require("./normalize-glob-path");
const angularConfigFile = ['angular.json', '.angular.json'];
const workspaceConfigFile = 'workspace.json';
const projectConfigFile = 'project.json';
const defaultSourceRoot = 'src';
function searchConfig(searchPlaces, searchFrom = '') {
    var _a;
    const cwd = process.cwd();
    const resolvePath = path_1.default.resolve(cwd, searchFrom);
    const stopDir = path_1.default.resolve(cwd, '../');
    return (_a = (0, cosmiconfig_1.cosmiconfigSync)('', {
        stopDir,
        loaders: {
            '.json': json_utils_1.jsoncParser,
        },
        searchPlaces: (0, collection_utils_1.coerceArray)(searchPlaces),
    }).search(resolvePath)) === null || _a === void 0 ? void 0 : _a.config;
}
function logNotFound(searchPlaces) {
    console.log(chalk_1.default.black.bgRed(`Unable to load workspace config from ${searchPlaces.join(', ')}. Defaulting source root to '${defaultSourceRoot}'`));
}
function resolveProjectBasePath(projectName) {
    let projectPath = '';
    if (projectName) {
        projectPath = (0, normalize_glob_path_1.normalizedGlob)(`**/${projectName}`)[0];
    }
    const angularConfig = searchConfig(angularConfigFile, projectPath);
    const workspaceConfig = searchConfig(workspaceConfigFile, projectPath);
    const projectConfig = searchConfig(projectConfigFile, projectPath);
    if (!angularConfig && !workspaceConfig && !projectConfig) {
        logNotFound([...angularConfigFile, workspaceConfigFile, projectConfigFile]);
        return { projectBasePath: defaultSourceRoot };
    }
    let resolved;
    for (const config of [angularConfig, workspaceConfig, projectConfig]) {
        resolved = resolveProject(config, projectName);
        if (resolved) {
            break;
        }
    }
    return {
        projectBasePath: resolved.sourceRoot,
        projectType: resolved.projectType,
    };
}
exports.resolveProjectBasePath = resolveProjectBasePath;
function resolveProject(config, projectName) {
    let projectConfig = config;
    if (config === null || config === void 0 ? void 0 : config.projects) {
        projectName =
            projectName || config.defaultProject || Object.keys(config.projects)[0];
        const project = config.projects[projectName];
        projectConfig = (0, validators_utils_1.isString)(project)
            ? searchConfig(projectConfigFile, project)
            : project;
    }
    if (projectConfig === null || projectConfig === void 0 ? void 0 : projectConfig.sourceRoot) {
        return {
            sourceRoot: projectConfig.sourceRoot,
            projectType: projectConfig.projectType,
        };
    }
    return null;
}
//# sourceMappingURL=resolve-project-base-path.js.map