"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generateKeys = void 0;
const flat_1 = require("flat");
const glob_1 = __importDefault(require("glob"));
const nodePath = __importStar(require("path"));
const file_utils_1 = require("../utils/file.utils");
const object_utils_1 = require("../utils/object.utils");
function filterLangs(config) {
    return function (path) {
        return config.langs.find((lang) => lang === nodePath.basename(path).replace(`.${config.fileFormat}`, ''));
    };
}
/**
 * In use in the Webpack Plugin
 */
function generateKeys({ translationPath, scopeToKeys, config }) {
    const scopePaths = config.scopePathMap || {};
    let result = [];
    for (const [scope, path] of Object.entries(scopePaths)) {
        const keys = scopeToKeys[scope];
        if (keys) {
            result.push({
                keys,
                files: glob_1.default
                    .sync(`${path}/*.${config.fileFormat}`)
                    .filter(filterLangs(config)),
            });
        }
    }
    for (const [scope, keys] of Object.entries(scopeToKeys)) {
        if (keys) {
            const isGlobal = scope === '__global';
            result.push({
                keys,
                files: glob_1.default
                    .sync(`${translationPath}/${isGlobal ? '' : scope}*.${config.fileFormat}`)
                    .filter(filterLangs(config)),
            });
        }
    }
    for (let { files, keys } of result) {
        if (config.unflat) {
            keys = (0, flat_1.unflatten)(keys);
        }
        for (const filePath of files) {
            const translation = (0, file_utils_1.readFile)(filePath, { parse: true });
            (0, file_utils_1.writeFile)(filePath, (0, object_utils_1.mergeDeep)({}, keys, translation));
        }
    }
}
exports.generateKeys = generateKeys;
//# sourceMappingURL=generate-keys.js.map