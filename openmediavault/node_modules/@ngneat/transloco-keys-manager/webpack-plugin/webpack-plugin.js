"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TranslocoExtractKeysWebpackPlugin = void 0;
const keys_builder_1 = require("../keys-builder");
const build_translation_file_1 = require("../keys-builder/build-translation-file");
const template_1 = require("../keys-builder/template");
const typescript_1 = require("../keys-builder/typescript");
const init_extraction_1 = require("../utils/init-extraction");
const object_utils_1 = require("../utils/object.utils");
const path_utils_1 = require("../utils/path.utils");
const resolve_config_1 = require("../utils/resolve-config");
const update_scopes_map_1 = require("../utils/update-scopes-map");
const generate_keys_1 = require("./generate-keys");
let init = true;
class TranslocoExtractKeysWebpackPlugin {
    constructor(inlineConfig = {}) {
        this.config = (0, resolve_config_1.resolveConfig)(inlineConfig);
        this.inlineConfig = inlineConfig;
    }
    apply(compiler) {
        compiler.hooks.watchRun.tap('TranslocoExtractKeysPlugin', (comp) => {
            if (init) {
                (0, keys_builder_1.buildTranslationFiles)(this.config);
                init = false;
                return;
            }
            const keysExtractions = { html: [], ts: [] };
            const files = comp.modifiedFiles || Object.keys(comp.watchFileSystem.watcher.mtimes);
            for (const file of files) {
                let fileType;
                if (file.endsWith('.html')) {
                    fileType = 'html';
                }
                else if (!file.endsWith('spec.ts') && file.endsWith('.ts')) {
                    fileType = 'ts';
                }
                fileType && keysExtractions[fileType].push(file);
            }
            let htmlResult = (0, init_extraction_1.initExtraction)();
            let tsResult = (0, init_extraction_1.initExtraction)();
            if (keysExtractions.html.length || keysExtractions.ts.length) {
                if (keysExtractions.ts.length) {
                    // Maybe someone added a TRANSLOCO_SCOPE
                    const newScopes = (0, update_scopes_map_1.updateScopesMap)({ files: keysExtractions.ts });
                    const paths = (0, path_utils_1.buildScopeFilePaths)({
                        aliasToScope: newScopes,
                        langs: this.config.langs,
                        output: this.config.output,
                        fileFormat: this.config.fileFormat,
                    });
                    paths.forEach(({ path }) => (0, build_translation_file_1.buildTranslationFile)({
                        path,
                        fileFormat: this.config.fileFormat,
                    }));
                    tsResult = (0, typescript_1.extractTSKeys)(Object.assign(Object.assign({}, this.config), { files: keysExtractions.ts }));
                }
                if (keysExtractions.html.length) {
                    htmlResult = (0, template_1.extractTemplateKeys)(Object.assign(Object.assign({}, this.config), { files: keysExtractions.html }));
                }
                const scopeToKeys = (0, object_utils_1.mergeDeep)({}, htmlResult.scopeToKeys, tsResult.scopeToKeys);
                const hasTranslateKeys = Object.keys(scopeToKeys).some((key) => Object.keys(scopeToKeys[key]).length > 0);
                if (hasTranslateKeys) {
                    (0, generate_keys_1.generateKeys)({
                        config: this.config,
                        translationPath: this.config.translationsPath,
                        scopeToKeys,
                    });
                }
            }
        });
    }
}
exports.TranslocoExtractKeysWebpackPlugin = TranslocoExtractKeysWebpackPlugin;
//# sourceMappingURL=webpack-plugin.js.map