import { Directive } from '@angular/core';
import { fromEvent, merge, Observable } from 'rxjs';
import { map, switchMap, takeUntil, tap } from 'rxjs/operators';
import { stopPropagation } from './scrollbar/common';
import * as i0 from "@angular/core";
export class ScrollViewport {
    constructor(viewPort) {
        this.viewPort = viewPort;
        this.nativeElement = viewPort.nativeElement;
    }
    // Get viewport size, clientHeight or clientWidth
    get clientHeight() {
        return this.nativeElement.clientHeight;
    }
    get clientWidth() {
        return this.nativeElement.clientWidth;
    }
    get scrollHeight() {
        return this.nativeElement.scrollHeight;
    }
    get scrollWidth() {
        return this.nativeElement.scrollWidth;
    }
    // Get viewport scroll offset, scrollTop or scrollLeft
    get scrollTop() {
        return this.nativeElement.scrollTop;
    }
    get scrollLeft() {
        return this.nativeElement.scrollLeft;
    }
    // Get the available scrollable size
    get scrollMaxX() {
        return this.scrollWidth - this.clientWidth;
    }
    get scrollMaxY() {
        return this.scrollHeight - this.clientHeight;
    }
    get contentHeight() {
        return this.contentWrapperElement?.clientHeight || 0;
    }
    get contentWidth() {
        return this.contentWrapperElement?.clientWidth || 0;
    }
    /**
     * Activate viewport pointer events such as 'hovered' and 'clicked' events
     */
    activatePointerEvents(propagate, destroyed) {
        this.hovered = new Observable((subscriber) => {
            // Stream that emits when pointer is moved over the viewport (used to set the hovered state)
            const mouseMoveStream = fromEvent(this.nativeElement, 'mousemove', { passive: true });
            const mouseMove = propagate ? mouseMoveStream : mouseMoveStream.pipe(stopPropagation());
            // Stream that emits when pointer leaves the viewport (used to remove the hovered state)
            const mouseLeave = fromEvent(this.nativeElement, 'mouseleave', { passive: true }).pipe(map(() => false));
            merge(mouseMove, mouseLeave).pipe(tap((e) => subscriber.next(e)), takeUntil(destroyed)).subscribe();
        });
        this.clicked = new Observable((subscriber) => {
            const mouseDown = fromEvent(this.nativeElement, 'mousedown', { passive: true }).pipe(tap((e) => subscriber.next(e)));
            const mouseUp = fromEvent(this.nativeElement, 'mouseup', { passive: true }).pipe(tap(() => subscriber.next(false)));
            mouseDown.pipe(switchMap(() => mouseUp), takeUntil(destroyed)).subscribe();
        });
    }
    /**
     * Set this directive as a non-functional wrapper, called when a custom viewport is used
     */
    setAsWrapper() {
        // In this case the default viewport and the default content wrapper will act as a mask
        this.nativeElement.className = 'ng-native-scrollbar-hider ng-scroll-layer';
        if (this.nativeElement.firstElementChild) {
            this.nativeElement.firstElementChild.className = 'ng-scroll-layer';
        }
    }
    /**
     * Set this directive as  the viewport, called when no custom viewport is used
     */
    setAsViewport(customClassName) {
        this.nativeElement.className = `ng-native-scrollbar-hider ng-scroll-viewport ${customClassName}`;
        // Check if the custom viewport has only one child and set it as the content wrapper
        if (this.nativeElement.firstElementChild) {
            this.contentWrapperElement = this.nativeElement.firstElementChild;
            this.contentWrapperElement.classList.add('ng-scroll-content');
        }
    }
    /**
     * Scroll viewport vertically
     */
    scrollYTo(value) {
        this.nativeElement.scrollTop = value;
    }
    /**
     * Scroll viewport horizontally
     */
    scrollXTo(value) {
        this.nativeElement.scrollLeft = value;
    }
}
ScrollViewport.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.1", ngImport: i0, type: ScrollViewport, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });
ScrollViewport.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.1.1", type: ScrollViewport, selector: "[scrollViewport]", ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.1", ngImport: i0, type: ScrollViewport, decorators: [{
            type: Directive,
            args: [{
                    selector: '[scrollViewport]'
                }]
        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });
//# sourceMappingURL=data:application/json;base64,