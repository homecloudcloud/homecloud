import { Directive } from '@angular/core';
import { fromEvent, merge, Subject } from 'rxjs';
import { distinctUntilChanged, map, switchMap, takeUntil, tap } from 'rxjs/operators';
import { isWithinBounds, stopPropagation } from './common';
import * as i0 from "@angular/core";
import * as i1 from "../ng-scrollbar-base";
import * as i2 from "@angular/cdk/platform";
// @dynamic
export class Scrollbar {
    constructor(el, cmp, platform, document, zone) {
        this.el = el;
        this.cmp = cmp;
        this.platform = platform;
        this.document = document;
        this.zone = zone;
        // Stream that emits to unsubscribe from all streams
        this.destroyed = new Subject();
    }
    /**
     * Activate scrollbar pointer events
     */
    activatePointerEvents() {
        // Stream that emits when scrollbar thumb is dragged
        let thumbDragEvent;
        // Stream that emits when scrollbar track is clicked
        let trackClickEvent;
        // Stream that emits when scrollbar track is hovered
        let trackHoveredEvent;
        // Set the method used for the pointer events option
        if (this.cmp.pointerEventsMethod === 'viewport') {
            // Pointer events using the viewport
            this.viewportTrackClicked = new Subject();
            this.viewportThumbClicked = new Subject();
            // Activate the pointer events of the viewport directive
            this.cmp.viewport.activatePointerEvents(this.cmp.viewportPropagateMouseMove, this.destroyed);
            // Set streams
            thumbDragEvent = this.viewportThumbClicked;
            trackClickEvent = this.viewportTrackClicked;
            trackHoveredEvent = this.cmp.viewport.hovered.pipe(
            // Check if track is hovered
            map((e) => e ? isWithinBounds(e, this.el.getBoundingClientRect()) : false), distinctUntilChanged(), 
            // Enable / disable text selection
            tap((hovered) => this.document.onselectstart = hovered ? () => false : null));
            this.cmp.viewport.clicked.pipe(tap((e) => {
                if (e) {
                    if (isWithinBounds(e, this.thumb.clientRect)) {
                        this.viewportThumbClicked.next(e);
                    }
                    else if (isWithinBounds(e, this.track.clientRect)) {
                        this.cmp.setClicked(true);
                        this.viewportTrackClicked.next(e);
                    }
                }
                else {
                    this.cmp.setClicked(false);
                }
            }), takeUntil(this.destroyed)).subscribe();
        }
        else {
            // Pointer events method is using 'scrollbar'
            thumbDragEvent = this.thumb.clicked;
            trackClickEvent = this.track.clicked;
            trackHoveredEvent = this.hovered;
        }
        return merge(
        // Activate scrollbar hovered event
        trackHoveredEvent.pipe(tap((e) => this.setHovered(e))), 
        // Activate scrollbar thumb drag event
        thumbDragEvent.pipe(switchMap((e) => this.thumb.dragged(e))), 
        // Activate scrollbar track click event
        trackClickEvent.pipe(switchMap((e) => this.track.onTrackClicked(e, this.thumb.size, this.viewportScrollSize))));
    }
    // Stream that emits when the track element is hovered
    get hovered() {
        const mouseEnter = fromEvent(this.el, 'mouseenter', { passive: true }).pipe(stopPropagation(), map(() => true));
        const mouseLeave = fromEvent(this.el, 'mouseleave', { passive: true }).pipe(stopPropagation(), map(() => false));
        return merge(mouseEnter, mouseLeave);
    }
    ngOnInit() {
        this.zone.runOutsideAngular(() => {
            // Activate pointer events on Desktop only
            if (!(this.platform.IOS || this.platform.ANDROID) && !this.cmp.pointerEventsDisabled) {
                this.activatePointerEvents().pipe(takeUntil(this.destroyed)).subscribe();
            }
            // Update scrollbar thumb when viewport is scrolled and when scrollbar component is updated
            merge(this.cmp.scrolled, this.cmp.updated).pipe(tap(() => this.thumb?.update()), takeUntil(this.destroyed)).subscribe();
        });
    }
    ngOnDestroy() {
        this.destroyed.next();
        this.destroyed.complete();
        // Clean up viewport streams if used
        if (this.viewportThumbClicked && this.viewportTrackClicked) {
            this.viewportTrackClicked.complete();
            this.viewportThumbClicked.complete();
        }
    }
}
Scrollbar.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.1", ngImport: i0, type: Scrollbar, deps: [{ token: HTMLElement }, { token: i1.NgScrollbarBase }, { token: i2.Platform }, { token: Document }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
Scrollbar.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.1.1", type: Scrollbar, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.1", ngImport: i0, type: Scrollbar, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: HTMLElement }, { type: i1.NgScrollbarBase }, { type: i2.Platform }, { type: Document }, { type: i0.NgZone }]; } });
//# sourceMappingURL=data:application/json;base64,