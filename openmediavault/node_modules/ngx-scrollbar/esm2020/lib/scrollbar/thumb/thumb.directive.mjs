import { Directive, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { ThumbAdapter } from './thumb';
import * as i0 from "@angular/core";
import * as i1 from "../../ng-scrollbar-base";
import * as i2 from "../track/track.directive";
import * as i3 from "@angular/cdk/bidi";
export class ThumbXDirective extends ThumbAdapter {
    constructor(cmp, track, element, document, dir) {
        super(cmp, track, element.nativeElement, document);
        this.cmp = cmp;
        this.track = track;
        this.element = element;
        this.document = document;
        this.dir = dir;
    }
    get clientProperty() {
        return 'clientX';
    }
    get pageProperty() {
        return 'pageX';
    }
    get viewportScrollSize() {
        return this.cmp.viewport.scrollWidth;
    }
    get viewportScrollOffset() {
        return this.cmp.viewport.scrollLeft;
    }
    get viewportScrollMax() {
        return this.cmp.viewport.scrollMaxX;
    }
    get dragStartOffset() {
        return this.clientRect.left + this.document.defaultView.pageXOffset || 0;
    }
    get size() {
        return this.thumbElement.clientWidth;
    }
    updateStyles(position, size) {
        this.thumbElement.style.width = `${size}px`;
        this.thumbElement.style.transform = `translate3d(${position}px, 0, 0)`;
    }
    handleDrag(position, scrollMax) {
        if (this.dir.value === 'rtl') {
            if (this.cmp.manager.rtlScrollAxisType === 1 /* RtlScrollAxisType.NEGATED */) {
                return position - scrollMax;
            }
            if (this.cmp.manager.rtlScrollAxisType === 2 /* RtlScrollAxisType.INVERTED */) {
                return scrollMax - position;
            }
            // Keeping this as a memo
            // if (this.rtlScrollAxisType === RtlScrollAxisType.NORMAL) {
            //   return position;
            // }
        }
        return position;
    }
    handleDirection(position, trackMax) {
        if (this.dir.value === 'rtl') {
            if (this.cmp.manager.rtlScrollAxisType === 2 /* RtlScrollAxisType.INVERTED */) {
                return -position;
            }
            if (this.cmp.manager.rtlScrollAxisType === 0 /* RtlScrollAxisType.NORMAL */) {
                return position - trackMax;
            }
            // Keeping this as a memo
            // if (this.rtlScrollAxisType === RtlScrollAxisType.NEGATED) {
            //   return position;
            // }
        }
        return position;
    }
    setDragging(value) {
        this.cmp.setDragging({ horizontalDragging: value });
    }
    scrollTo(position) {
        this.cmp.viewport.scrollXTo(position);
    }
}
ThumbXDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.1", ngImport: i0, type: ThumbXDirective, deps: [{ token: i1.NgScrollbarBase }, { token: i2.TrackXDirective }, { token: i0.ElementRef }, { token: DOCUMENT }, { token: i3.Directionality }], target: i0.ɵɵFactoryTarget.Directive });
ThumbXDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.1.1", type: ThumbXDirective, selector: "[scrollbarThumbX]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.1", ngImport: i0, type: ThumbXDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[scrollbarThumbX]' }]
        }], ctorParameters: function () { return [{ type: i1.NgScrollbarBase }, { type: i2.TrackXDirective }, { type: i0.ElementRef }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i3.Directionality }]; } });
export class ThumbYDirective extends ThumbAdapter {
    constructor(cmp, track, element, document) {
        super(cmp, track, element.nativeElement, document);
        this.cmp = cmp;
        this.track = track;
        this.element = element;
        this.document = document;
    }
    get pageProperty() {
        return 'pageY';
    }
    get viewportScrollSize() {
        return this.cmp.viewport.scrollHeight;
    }
    get viewportScrollOffset() {
        return this.cmp.viewport.scrollTop;
    }
    get viewportScrollMax() {
        return this.cmp.viewport.scrollMaxY;
    }
    get clientProperty() {
        return 'clientY';
    }
    get dragStartOffset() {
        return this.clientRect.top + this.document.defaultView.pageYOffset || 0;
    }
    get size() {
        return this.thumbElement.clientHeight;
    }
    updateStyles(position, size) {
        this.thumbElement.style.height = `${size}px`;
        this.thumbElement.style.transform = `translate3d(0px, ${position}px, 0)`;
    }
    handleDrag(position) {
        return position;
    }
    handleDirection(position) {
        return position;
    }
    setDragging(value) {
        this.cmp.setDragging({ verticalDragging: value });
    }
    scrollTo(position) {
        this.cmp.viewport.scrollYTo(position);
    }
}
ThumbYDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.1", ngImport: i0, type: ThumbYDirective, deps: [{ token: i1.NgScrollbarBase }, { token: i2.TrackYDirective }, { token: i0.ElementRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });
ThumbYDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.1.1", type: ThumbYDirective, selector: "[scrollbarThumbY]", usesInheritance: true, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.1", ngImport: i0, type: ThumbYDirective, decorators: [{
            type: Directive,
            args: [{ selector: '[scrollbarThumbY]' }]
        }], ctorParameters: function () { return [{ type: i1.NgScrollbarBase }, { type: i2.TrackYDirective }, { type: i0.ElementRef }, { type: Document, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }]; } });
//# sourceMappingURL=data:application/json;base64,