import { Directive } from '@angular/core';
import { coerceNumberProperty } from '@angular/cdk/coercion';
import { EMPTY, fromEvent, merge, of } from 'rxjs';
import { map, pluck, switchMap, tap } from 'rxjs/operators';
import { preventSelection, enableSelection, stopPropagation } from '../common';
import * as i0 from "@angular/core";
import * as i1 from "../../ng-scrollbar-base";
// @dynamic
export class TrackAdapter {
    constructor(cmp, trackElement, document) {
        this.cmp = cmp;
        this.trackElement = trackElement;
        this.document = document;
    }
    // Stream that emits when the track element is clicked
    get clicked() {
        const mouseDown = fromEvent(this.trackElement, 'mousedown', { passive: true }).pipe(stopPropagation(), preventSelection(this.document));
        const mouseup = fromEvent(this.document, 'mouseup', { passive: true }).pipe(stopPropagation(), enableSelection(this.document), switchMap(() => EMPTY));
        return merge(mouseDown, mouseup);
    }
    // Get track client rect
    get clientRect() {
        return this.trackElement.getBoundingClientRect();
    }
    /**
     * Stream that emits when scrollbar track is clicked
     */
    onTrackClicked(e, thumbSize, scrollSize) {
        return of(e).pipe(pluck(this.pageProperty), 
        // Calculate scrollTo position
        map((pageOffset) => {
            const clickOffset = pageOffset - this.offset;
            const offset = clickOffset - (thumbSize / 2);
            const ratio = offset / this.size;
            return ratio * scrollSize;
        }), 
        // Smooth scroll to position
        tap((value) => {
            this.cmp.scrollTo({
                ...this.mapToScrollToOption(value),
                duration: coerceNumberProperty(this.cmp.trackClickScrollDuration)
            });
        }));
    }
}
TrackAdapter.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.1.1", ngImport: i0, type: TrackAdapter, deps: [{ token: i1.NgScrollbarBase }, { token: HTMLElement }, { token: Document }], target: i0.ɵɵFactoryTarget.Directive });
TrackAdapter.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.1.1", type: TrackAdapter, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.1.1", ngImport: i0, type: TrackAdapter, decorators: [{
            type: Directive
        }], ctorParameters: function () { return [{ type: i1.NgScrollbarBase }, { type: HTMLElement }, { type: Document }]; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHJhY2suanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtc2Nyb2xsYmFyL3NyYy9saWIvc2Nyb2xsYmFyL3RyYWNrL3RyYWNrLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDMUMsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUJBQXVCLENBQUM7QUFDN0QsT0FBTyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsS0FBSyxFQUFjLEVBQUUsRUFBRSxNQUFNLE1BQU0sQ0FBQztBQUMvRCxPQUFPLEVBQUUsR0FBRyxFQUFFLEtBQUssRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLE1BQU0sZ0JBQWdCLENBQUM7QUFDNUQsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGVBQWUsRUFBRSxlQUFlLEVBQUUsTUFBTSxXQUFXLENBQUM7OztBQUcvRSxXQUFXO0FBRVgsTUFBTSxPQUFnQixZQUFZO0lBOEJoQyxZQUFnQyxHQUFvQixFQUNwQixZQUF5QixFQUN6QixRQUFrQjtRQUZsQixRQUFHLEdBQUgsR0FBRyxDQUFpQjtRQUNwQixpQkFBWSxHQUFaLFlBQVksQ0FBYTtRQUN6QixhQUFRLEdBQVIsUUFBUSxDQUFVO0lBQ2xELENBQUM7SUEvQkQsc0RBQXNEO0lBQ3RELElBQUksT0FBTztRQUNULE1BQU0sU0FBUyxHQUFHLFNBQVMsQ0FBYSxJQUFJLENBQUMsWUFBWSxFQUFFLFdBQVcsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDN0YsZUFBZSxFQUFFLEVBQ2pCLGdCQUFnQixDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsQ0FDaEMsQ0FBQztRQUNGLE1BQU0sT0FBTyxHQUFHLFNBQVMsQ0FBYSxJQUFJLENBQUMsUUFBUSxFQUFFLFNBQVMsRUFBRSxFQUFFLE9BQU8sRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FDckYsZUFBZSxFQUFFLEVBQ2pCLGVBQWUsQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDLEVBQzlCLFNBQVMsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FDdkIsQ0FBQztRQUNGLE9BQU8sS0FBSyxDQUFDLFNBQVMsRUFBRSxPQUFPLENBQUMsQ0FBQztJQUNuQyxDQUFDO0lBV0Qsd0JBQXdCO0lBQ3hCLElBQUksVUFBVTtRQUNaLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDO0lBQ25ELENBQUM7SUFPRDs7T0FFRztJQUNILGNBQWMsQ0FBQyxDQUFhLEVBQUUsU0FBaUIsRUFBRSxVQUFrQjtRQUNqRSxPQUFPLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQ2YsS0FBSyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUM7UUFDeEIsOEJBQThCO1FBQzlCLEdBQUcsQ0FBQyxDQUFDLFVBQWtCLEVBQUUsRUFBRTtZQUN6QixNQUFNLFdBQVcsR0FBRyxVQUFVLEdBQUcsSUFBSSxDQUFDLE1BQU0sQ0FBQztZQUM3QyxNQUFNLE1BQU0sR0FBRyxXQUFXLEdBQUcsQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLENBQUM7WUFDN0MsTUFBTSxLQUFLLEdBQUcsTUFBTSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUM7WUFDakMsT0FBTyxLQUFLLEdBQUcsVUFBVSxDQUFDO1FBQzVCLENBQUMsQ0FBQztRQUNGLDRCQUE0QjtRQUM1QixHQUFHLENBQUMsQ0FBQyxLQUFhLEVBQUUsRUFBRTtZQUNwQixJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQztnQkFDaEIsR0FBRyxJQUFJLENBQUMsbUJBQW1CLENBQUMsS0FBSyxDQUFDO2dCQUNsQyxRQUFRLEVBQUUsb0JBQW9CLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyx3QkFBd0IsQ0FBQzthQUNsRSxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FDSCxDQUFDO0lBQ0osQ0FBQzs7eUdBeERtQixZQUFZLGlEQStCYyxXQUFXLGFBQ2YsUUFBUTs2RkFoQzlCLFlBQVk7MkZBQVosWUFBWTtrQkFEakMsU0FBUzt3RkFnQ3NDLFdBQVcsWUFDZixRQUFRIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgRGlyZWN0aXZlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IGNvZXJjZU51bWJlclByb3BlcnR5IH0gZnJvbSAnQGFuZ3VsYXIvY2RrL2NvZXJjaW9uJztcclxuaW1wb3J0IHsgRU1QVFksIGZyb21FdmVudCwgbWVyZ2UsIE9ic2VydmFibGUsIG9mIH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7IG1hcCwgcGx1Y2ssIHN3aXRjaE1hcCwgdGFwIH0gZnJvbSAncnhqcy9vcGVyYXRvcnMnO1xyXG5pbXBvcnQgeyBwcmV2ZW50U2VsZWN0aW9uLCBlbmFibGVTZWxlY3Rpb24sIHN0b3BQcm9wYWdhdGlvbiB9IGZyb20gJy4uL2NvbW1vbic7XHJcbmltcG9ydCB7IE5nU2Nyb2xsYmFyQmFzZSB9IGZyb20gJy4uLy4uL25nLXNjcm9sbGJhci1iYXNlJztcclxuXHJcbi8vIEBkeW5hbWljXHJcbkBEaXJlY3RpdmUoKVxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgVHJhY2tBZGFwdGVyIHtcclxuXHJcbiAgLy8gU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiB0aGUgdHJhY2sgZWxlbWVudCBpcyBjbGlja2VkXHJcbiAgZ2V0IGNsaWNrZWQoKTogT2JzZXJ2YWJsZTxNb3VzZUV2ZW50PiB7XHJcbiAgICBjb25zdCBtb3VzZURvd24gPSBmcm9tRXZlbnQ8TW91c2VFdmVudD4odGhpcy50cmFja0VsZW1lbnQsICdtb3VzZWRvd24nLCB7IHBhc3NpdmU6IHRydWUgfSkucGlwZShcclxuICAgICAgc3RvcFByb3BhZ2F0aW9uKCksXHJcbiAgICAgIHByZXZlbnRTZWxlY3Rpb24odGhpcy5kb2N1bWVudClcclxuICAgICk7XHJcbiAgICBjb25zdCBtb3VzZXVwID0gZnJvbUV2ZW50PE1vdXNlRXZlbnQ+KHRoaXMuZG9jdW1lbnQsICdtb3VzZXVwJywgeyBwYXNzaXZlOiB0cnVlIH0pLnBpcGUoXHJcbiAgICAgIHN0b3BQcm9wYWdhdGlvbigpLFxyXG4gICAgICBlbmFibGVTZWxlY3Rpb24odGhpcy5kb2N1bWVudCksXHJcbiAgICAgIHN3aXRjaE1hcCgoKSA9PiBFTVBUWSlcclxuICAgICk7XHJcbiAgICByZXR1cm4gbWVyZ2UobW91c2VEb3duLCBtb3VzZXVwKTtcclxuICB9XHJcblxyXG4gIC8vIFJldHVybnMgZWl0aGVyICdwYWdlWCcgb3IgJ3BhZ2VZJyBhY2NvcmRpbmcgdG8gc2Nyb2xsYmFyIGF4aXNcclxuICBhYnN0cmFjdCBnZXQgcGFnZVByb3BlcnR5KCk6IHN0cmluZztcclxuXHJcbiAgLy8gUmV0dXJucyB0aGUgdHJhY2sgc2l6ZSwgY2xpZW50SGVpZ2h0IG9yIGNsaWVudFdpZHRoXHJcbiAgYWJzdHJhY3QgZ2V0IHNpemUoKTogbnVtYmVyO1xyXG5cclxuICAvLyBSZXR1cm5zIHRoZSBzdGFydCBvZmZzZXQgZWl0aGVyICdjbGllbnRSZWN0LnRvcCcgb3IgJ2NsaWVudFJlY3QubGVmdCdcclxuICBhYnN0cmFjdCBnZXQgb2Zmc2V0KCk6IG51bWJlcjtcclxuXHJcbiAgLy8gR2V0IHRyYWNrIGNsaWVudCByZWN0XHJcbiAgZ2V0IGNsaWVudFJlY3QoKTogRE9NUmVjdCB7XHJcbiAgICByZXR1cm4gdGhpcy50cmFja0VsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XHJcbiAgfVxyXG5cclxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IocHJvdGVjdGVkIGNtcDogTmdTY3JvbGxiYXJCYXNlLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwcm90ZWN0ZWQgdHJhY2tFbGVtZW50OiBIVE1MRWxlbWVudCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgcHJvdGVjdGVkIGRvY3VtZW50OiBEb2N1bWVudCkge1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU3RyZWFtIHRoYXQgZW1pdHMgd2hlbiBzY3JvbGxiYXIgdHJhY2sgaXMgY2xpY2tlZFxyXG4gICAqL1xyXG4gIG9uVHJhY2tDbGlja2VkKGU6IE1vdXNlRXZlbnQsIHRodW1iU2l6ZTogbnVtYmVyLCBzY3JvbGxTaXplOiBudW1iZXIpOiBPYnNlcnZhYmxlPG51bWJlcj4ge1xyXG4gICAgcmV0dXJuIG9mKGUpLnBpcGUoXHJcbiAgICAgIHBsdWNrKHRoaXMucGFnZVByb3BlcnR5KSxcclxuICAgICAgLy8gQ2FsY3VsYXRlIHNjcm9sbFRvIHBvc2l0aW9uXHJcbiAgICAgIG1hcCgocGFnZU9mZnNldDogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgY29uc3QgY2xpY2tPZmZzZXQgPSBwYWdlT2Zmc2V0IC0gdGhpcy5vZmZzZXQ7XHJcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gY2xpY2tPZmZzZXQgLSAodGh1bWJTaXplIC8gMik7XHJcbiAgICAgICAgY29uc3QgcmF0aW8gPSBvZmZzZXQgLyB0aGlzLnNpemU7XHJcbiAgICAgICAgcmV0dXJuIHJhdGlvICogc2Nyb2xsU2l6ZTtcclxuICAgICAgfSksXHJcbiAgICAgIC8vIFNtb290aCBzY3JvbGwgdG8gcG9zaXRpb25cclxuICAgICAgdGFwKCh2YWx1ZTogbnVtYmVyKSA9PiB7XHJcbiAgICAgICAgdGhpcy5jbXAuc2Nyb2xsVG8oe1xyXG4gICAgICAgICAgLi4udGhpcy5tYXBUb1Njcm9sbFRvT3B0aW9uKHZhbHVlKSxcclxuICAgICAgICAgIGR1cmF0aW9uOiBjb2VyY2VOdW1iZXJQcm9wZXJ0eSh0aGlzLmNtcC50cmFja0NsaWNrU2Nyb2xsRHVyYXRpb24pXHJcbiAgICAgICAgfSk7XHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgcHJvdGVjdGVkIGFic3RyYWN0IG1hcFRvU2Nyb2xsVG9PcHRpb24odmFsdWU6IG51bWJlcik6IFNjcm9sbFRvT3B0aW9ucztcclxufVxyXG4iXX0=